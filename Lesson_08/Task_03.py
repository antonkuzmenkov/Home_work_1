# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class Error:
    def __init__(self, *args):
        self.m_list = []

    def m_input(self):
        while True:
            try:
                a = int(input('Введите значения и Enter  '))
                self.m_list.append(a)
                print(f'Список - {self.m_list} \n ')
            except:
                print(f"Недопустимое значение - строка и булево")
                b = input(f'Попробовать еще раз? Y/N ')

                if b == 'y':
                    print(try_except.m_input())
                elif b == 'n':
                    return f'конец'
                else:
                    return f'конец'

try_except = Error(1)
print(try_except.m_input())